// SPDX-License-Identifier: AGPL-3.0-only
package static

import (
	"context"
	"strings"

	"github.com/diamondburned/arikawa/v3/api"
	"github.com/diamondburned/arikawa/v3/discord"
	"github.com/diamondburned/arikawa/v3/gateway"
	"github.com/diamondburned/arikawa/v3/utils/json/option"
	"github.com/starshine-sys/bcr"
	bcr2 "github.com/starshine-sys/bcr/v2"
)

var re = strings.NewReplacer(
	`b_<`, `…ì`,
	"d`", `…ñ`,
	`d_<`, `…ó`,
	`g_<`, `…†`,
	`h\`, `…¶`,
	`j\`, ` ù`,
	"l`", "…≠",
	`l\`, `…∫`,
	"n`", "…≥",
	`p\`, `…∏`,
	"r`", "…Ω",
	`r\`, "…π",
	"r\\`", "…ª",
	"s`", " Ç",
	`s\`, "…ï",
	"t`", " à",
	`v\`, ` ã`,
	`x\`, `…ß`,
	"z`", " ê",
	`z\`, " ë",

	`_A`, `Ãò`,
	"A", "…ë",
	`B\`, ` ô`,
	"B", "Œ≤",
	`C`, `√ß`,
	`D`, `√∞`,
	`E`, `…õ`,
	`<F>`, `‚ÜòÔ∏é`,
	`F`, `…±`,
	`_G`, `À†`,
	`G\_<`, ` õ`,
	`G\`, `…¢`,
	`G`, `…£`,
	`H\`, ` ú`,
	`H`, `…•`,
	`I\`, `·µª`,
	`I`, `…™`,
	`J\_<`, ` Ñ`,
	`J\`, `…ü`,
	`J`, `…≤`,
	`K\`, `…Æ`,
	`K`, `…¨`,
	`L\`, ` ü`,
	`L`, ` é`,
	`M\`, `…∞`,
	`M`, `…Ø`,
	`N\`, `…¥`,
	`_N`, `Ãº`,
	`N`, `≈ã`,
	`O\`, ` ò`,
	`_O`, `Ãπ`,
	`O`, `…î`,
	`P`, ` ã`,
	`Q`, `…í`,
	`R\`, ` Ä`,
	`<R>`, `‚ÜóÔ∏é`,
	`R`, ` Å`,
	`S`, ` É`,
	`T`, `Œ∏`,
	`U\`, `·µø`,
	`U`, ` ä`,
	`V`, ` å`,
	`W`, ` ç`,
	`X\`, `ƒß`,
	`_X`, `ÃÜ`,
	`X`, `œá`,
	`Y`, ` è`,
	`Z`, ` í`,
	`"`, `Àà`,
	`%`, `Àå`,
	`'`, ` ≤`,
	`:\`, `Àë`,
	`:`, `Àê`,

	"@`", `…ö`,
	`@\`, `…ò`,
	`@`, `…ô`,
	`{`, `√¶`,
	`}`, ` â`,
	`1`, `…®`,
	`2`, `√∏`,
	`3\`, `…û`,
	`3`, `…ú`,
	`4`, `…æ`,
	`5`, `…´`,
	`6`, `…ê`,
	`7`, `…§`,
	`8`, `…µ`,
	`9`, `≈ì`,
	`&`, `…∂`,
	`?\`, ` ï`,
	`?`, ` î`,
	`<\`, ` ¢`,
	`>\`, ` °`,
	`^`, `Íúõ`,
	`!\`, `«É`,
	`!`, `Íúú`,
	`|\|\`, `«Å`,
	`||`, `‚Äñ`,
	`|\`, `«Ä`,
	`|`, `|`,
	`=\`, `«Ç`,

	// diacritics
	`_"`, `Ãà`,
	`_+`, `Ãü`,
	`_-`, `Ã†`,
	`_0`, `Ã•`,
	`_=`, `Ã©`,
	`=`, `Ã©`,
	`_>`, ` º`,
	`_?\`, `À§`,
	`_^`, `ÃØ`,
	`_}`, `Ãö`,
	"`", `Àû`,
	`_~`, `ÃÉ`,
	`~`, `ÃÉ`,
	`_a`, `Ã∫`,
	`_c`, `Ãú`,
	`_d`, `Ã™`,
	`_h`, ` ∞`,
	`_j`, ` ≤`,
	`_l`, `À°`,
	`_m`, `Ãª`,
	`_n`, `‚Åø`,
	`_o`, `Ãû`,
	`_q`, `Ãô`,
	`_r`, `Ãù`,
	`_t`, `Ã§`,
	`_v`, `Ã¨`,
	`_w`, ` ∑`,
	`_x`, `ÃΩ`,

	// joiners
	`_`, `Õ°`,
	`-\`, `Õú`,

	// separator
	`-`, ``,
)

func (bot *Bot) sampa(ctx *bcr.Context) (err error) {
	if ctx.RawArgs == "" {
		_, err = ctx.Replyc(bcr.ColourRed, "You must actually give something to convert!")
		return
	}

	embed := discord.Embed{
		Author: &discord.EmbedAuthor{
			Icon: ctx.Author.AvatarURLWithType(discord.PNGImage),
			Name: ctx.DisplayName(),
		},
		Description: re.Replace(ctx.RawArgs),
		Color:       bcr.ColourBlurple,
	}

	msg, err := ctx.Send("", embed)
	if err != nil {
		return err
	}

	_, err = bot.DB.Pool.Exec(context.Background(), "insert into command_responses (message_id, user_id) values ($1, $2)", msg.ID, ctx.Author.ID)
	return
}

func (bot *Bot) sampaSlash(ctx *bcr2.CommandContext) (err error) {
	text := ctx.Option("text").String()

	err = ctx.ReplyComplex(api.InteractionResponseData{
		Content: option.NewNullableString(re.Replace(text)),
		AllowedMentions: &api.AllowedMentions{
			Parse: []api.AllowedMentionType{},
		},
	})
	if err != nil {
		return
	}

	msg, err := ctx.Original()
	if err != nil {
		return err
	}

	_, err = bot.DB.Pool.Exec(context.Background(), "insert into command_responses (message_id, user_id) values ($1, $2)", msg.ID, ctx.User.ID)
	return
}

func (bot *Bot) sampaReaction(ev *gateway.MessageReactionAddEvent) {
	if ev.Emoji.Name != "‚ùå" && ev.Emoji.Name != "üóëÔ∏è" {
		return
	}

	var matchUser discord.UserID

	err := bot.DB.Pool.QueryRow(context.Background(), "select user_id from command_responses where message_id = $1", ev.MessageID).Scan(&matchUser)
	if err != nil {
		return
	}

	if matchUser != ev.UserID {
		return
	}

	s, _ := bot.Router.StateFromGuildID(ev.GuildID)

	err = s.DeleteMessage(ev.ChannelID, ev.MessageID, "")
	if err != nil {
		bot.Sugar.Errorf("Error deleting message: %v", err)
		return
	}

	_, err = bot.DB.Pool.Exec(context.Background(), "delete from command_responses where message_id = $1", ev.MessageID)
	if err != nil {
		bot.Sugar.Errorf("Error deleting message: %v", err)
	}
}
